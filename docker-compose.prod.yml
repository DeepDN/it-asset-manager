version: '3.8'

services:
  # Production Flask application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: it-asset-manager-prod
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://it_assets_user:${POSTGRES_PASSWORD}@postgres:5432/it_assets_prod
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      # Persist logs
      - ./logs:/app/logs
      # Persist uploads
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - it-asset-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    container_name: it-asset-manager-postgres-prod
    environment:
      - POSTGRES_DB=it_assets_prod
      - POSTGRES_USER=it_assets_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups/postgres:/backups
    networks:
      - it-asset-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U it_assets_user -d it_assets_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: it-asset-manager-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    networks:
      - it-asset-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: it-asset-manager-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./it_asset_manager/static:/var/www/static
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - it-asset-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database backup service
  postgres-backup:
    image: postgres:15-alpine
    container_name: it-asset-manager-backup
    environment:
      - POSTGRES_DB=it_assets_prod
      - POSTGRES_USER=it_assets_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups/postgres:/backups
      - ./docker/scripts/backup.sh:/backup.sh
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - it-asset-network
    restart: "no"
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: it-asset-manager-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - it-asset-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: it-asset-manager-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - it-asset-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  it-asset-network:
    driver: bridge
